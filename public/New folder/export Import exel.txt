<form action="{{ route('contact.downloadContactExcel')  }}" method="GET">
                <button type="submit" class="btn btn-primary lead mt-3 mb-3">Download FIle Sample</button>
            </form>

  public function downloadContactExcel(){
        return Excel::download(new ContactExcel, 'contact.xlsx');

    }




<?php

namespace App\Exports;

use App\Models\User;
use Maatwebsite\Excel\Events\AfterSheet;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithHeadings;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;
use Maatwebsite\Excel\Concerns\FromCollection;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;




class ContactExcel implements FromCollection, WithHeadings, WithEvents
{
    protected $row_count;
    protected $column_count;
    protected $selects;
 
    public function __construct()
    {
        $username=User::where('company_id',auth()->user()->company_id)->pluck('username')->toArray();
        $deal_types=['Lead','Customer'];
        $selects=[
            ['columns_name'=>'J','options'=>$username],
            ['columns_name'=>'B','options'=>$deal_types],
        ];
        $this->selects=$selects;
        $this->row_count=100;
        $this->column_count=10;
    }
 
    public function collection()
    {
        return collect([]);
    }
 
    public function headings(): array
    {
        return [
            'SN',
            'Deal Type*',
            'Contact Person Name*',
            'Contact Email*',
            'Contact Phone Number*',
            'Organization Name',
            'Organization Email',
            'Organization Phone Number',
            'Organization Address',
            'Creater UserName*',
        ];
    }
 
    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event) {
                $row_count = $this->row_count;
                $column_count = $this->column_count;
                foreach ($this->selects as $select){
                   $drop_column = $select['columns_name'];
                   $options = $select['options'];
                   $validation = $event->sheet->getCell("{$drop_column}2")->getDataValidation();
                   $validation->setType(DataValidation::TYPE_LIST );
                   $validation->setErrorStyle(DataValidation::STYLE_INFORMATION );
                   $validation->setAllowBlank(false);
                   $validation->setShowInputMessage(true);
                   $validation->setShowErrorMessage(true);
                   $validation->setShowDropDown(true);
                   $validation->setErrorTitle('Input error');
                   $validation->setError('Value is not in list.');
                   $validation->setPromptTitle('Pick from list');
                   $validation->setPrompt('Please pick a value from the drop-down list.');
                   $validation->setFormula1(sprintf('"%s"',implode(',',$options)));
 
                   for ($i = 3; $i <= $row_count; $i++) {
                       $event->sheet->getCell("{$drop_column}{$i}")->setDataValidation(clone $validation);
                   }
                   for ($i = 1; $i <= $column_count; $i++) {
                       $column = Coordinate::stringFromColumnIndex($i);
                       $event->sheet->getColumnDimension($column)->setAutoSize(true);
                   }
                }
            },
        ];
    }
}

 i need validation??


import


public function uploadContactExcel(Request $request){
        $data = $request->all();
        $request->validate([
            'files' => 'required|mimes:xlsx,xls'
        ]);
        try {
            Excel::import(new ContactImport, $data['files']);
        } catch (\Throwable $th) {
            dd($th->getMessage());
        }
        Alert::success('Success', 'Contact Imported Successfully');
        
        return redirect()->route('organization.index')->with('success', 'All good!');
    }



<?php

namespace App\Imports;

use App\Models\User;
use App\Models\Contact;
use App\Models\Organization;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithStartRow;
use Maatwebsite\Excel\Concerns\WithValidation;

class ContactImport implements  ToCollection, WithStartRow,WithValidation
{
    /**
    * @param array $row
    *
    * @return \Illuminate\Database\Eloquent\Model|null
    */
    public function collection(Collection $rows)
    {
        foreach ($rows as $row) 
        {
            $userId=auth()->id();
            if($row[9]!=null){
                $user=User::where('username',$row[9])->first();
                if($user!=null){
                    $userId=$user->id;
                }
            }
            $orgId=null;
            $isPrimary=1;
            if($row[5]!=null){
                $org=Organization::where('name',$row[5])->where('company_id' ,auth()->user()->company_id)->first();
                if($org){
                    $orgId=$org;
                    $isPrimary=0;
                }else{
                    $organization=Organization::create([
                        'name'=>$row[5],
                        'company_id' => auth()->user()->company_id,
                        "creator_user" => $userId,
                        "deal_type" => $row[1],
                    ]);
                    $orgId=$organization;
                    if ($row[6]!=null) {
                        $org_email= DB::table('organization_email')->where('organization_id',$orgId['id'])->where('email',$row[6])->first();
                        if(!$org_email){
                            DB::table('organization_email')->insert([
                                'organization_id' => $organization->id,
                                'email' => $row[6]
                            ]);
                        }
                    }
                    if ($row[7]!=null) {
                        $org_contact_num= DB::table('organization_number')->where('organization_id',$orgId['id'])->where('contact_number',$row[7])->first();
                        if(!$org_contact_num){
                            DB::table('organization_number')->insert([
                                'organization_id' => $organization->id,
                                'contact_number' =>  $row[7]
                            ]);
                        }
                    }
                    if ($row[8]!=null) {
                        $org_address= DB::table('organization_address')->where('organization_id',$orgId['id'])->where('address',$row[8])->first();
                        if(!$org_address){
                        DB::table('organization_address')->insert([
                            'organization_id' => $organization->id,
                            'address' => $row[8]
                        ]);
                        }
                    }
                }
            }
            $old_contact=Contact::where('name',$row[2])->where('organization_id',$orgId['id'])->where('company_id', auth()->user()->company_id)->first();
            if($old_contact){
                $newContactId=$old_contact['id'];
            }else{
                $contact=Contact::create([
                    "name" => $row[2],
                    "organization_id" =>$orgId['id'],
                    "company_id" => auth()->user()->company_id,
                    "creator_user" => $userId,
                    "status" => "Active",
                    "created_at" => now(),
                    "updated_at" =>now(),
                    "is_primary" =>$isPrimary,
                    "deal_type" =>$orgId!=null ? $orgId['deal_type']:$row[1],
                ]);
                $newContactId=$contact['id'];
            }
            if($row[3]!=null){
                $contact_email= DB::table('contact_email')->where('contact_id',$newContactId)->where('email',$row[3])->first();
                if(!$contact_email){
                    DB::table('contact_email')->insert([
                        'contact_id' => $newContactId,
                        'email' => $row[3]
                    ]);
                }
            }
                    
            if($row[4]!=null) {
                $contact_phone= DB::table('contact_phone')->where('contact_id',$newContactId)->where('phone_number',$row[4])->first();
                if(!$contact_phone){
                    DB::table('contact_phone')->insert([
                        'contact_id' => $newContactId,
                        'phone_number' => $row[4]
                    ]);
                }
            }
        }
    }

    // public function rules(): array
    // {
    //    return [
    //        '2' => ['required', 'string'],
    //        '3' => ['required', 'email'],
    //        '4' => ['required', 'numeric'],
    //    ];
    // }
    
    // public function customValidationAttributes()
    // {
    //    return [
    //        '2' => 'Contact Person Name',
    //        '3' => 'Contact Email',
    //        '4' => 'Contact Phone Number',
    //    ];
    // }

    public function startRow(): int
    {
        return 2;
    }
}
